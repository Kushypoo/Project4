#include <iostream>
#include <fstream>

#include "my_string.h"

#define CARS 5
#define LIDAR 15.0
#define GPS 5.0
#define CAMERA 10.0
#define RADAR 20.0
#define NONE 0.0
#define MAX 256
#define SENSOR 3
#define ZERO 0
#define YEAR 2020
#define AVAILABLE 0
const char * DFT_SENSOR = "none";

void userMenuPrompt();
void readIn(class Agency *arr);
void printAll(class Agency *arr);
void printFiltered(class Agency *arr);
void reserveOne(class Agency *arr);

using namespace std;

class Sensor {
	public:
		Sensor();
		Sensor(char *type, float *extracost, int *gps, int *camera, int *lidar, int *radar);
		Sensor(const Sensor &agency);
		void printActiveSensor(int *gps, int *camera, int *lidar, int *radar);
		void setType(const char *type);
		void setCost(float *cost);
		void setGps(int *gps);
		void setCam(int *camera);
		void setLidar(int *lidar);
		void setRadar(int *radar);
		const char *getType() const;
		const float getCost() const;
		const int getGps() const;
		const int getCam() const;
		const int getLidar() const;
		const int getRadar() const;
		Sensor operator==(const Sensor &agency);
	private:
		char m_type[MAX];
		float m_extracost;
		static int gps_cnt;
		static int camera_cnt;
		static int lidar_cnt;
		static int radar_cnt;
		
	
};

Sensor::Sensor(const Sensor &agency){
	m_type = agency.m_type;
	m_extracost = agency.m_extracost;
	gps_cnt = agency.gps_cnt;
	camera_cnt = agency.camera_cnt;
	lidar_cnt = agency.lidar_cnt;
	radar_cnt = agency.radar_cnt;
}

Sensor::Sensor(){
	setType(DFT_SENSOR);
	m_extracost = NONE;
	setGps(ZERO);
	setCam(ZERO);
	setLidar(ZERO);
	setRadar(ZERO);
	
}

Sensor::Sensor(char *type, float *extracost, int *gps, int *camera, int *lidar, int *radar){
	m_type = *type;
	m_extracost = *extracost;
	setGps(gps);
	setCam(camera);
	setLidar(lidar);
	setRadar(radar);
	
}
void printActiveSensor(int *gps, int *camera, int *lidar, int *radar){

	
	for(int i = 0; i < 4; i++){
		if(*gps >=1){
			cout << "gps " << endl;
		}
		if(*camera>=1){
			cout << "camera " << endl;
		}
		if(*lidar>=1){
			cout << "lidar " << endl;
		}
		if(*radar>=1){
			cout << "radar " << endl;
		}
	}
	
}
void Sensor::setType(const char *type){
	myStringCopy(m_type, type);
}

void Sensor::setCost(float *cost){
	m_extracost = *cost;
}

void Sensor::setGps(int *gps){
	gps_cnt = *gps;
}

void Sensor::setCam(int *camera){
	camera_cnt = *camera;
}

void Sensor::setLidar(int *lidar){
	lidar_cnt = *lidar;
}

void Sensor::setRadar(int *radar){
	radar_cnt = *radar;
}

const char * Sensor::getType() const{
	return m_type;
}

const float Sensor::getCost(int *gps_cnt, int *camera_cnt, int *lidar_cnt, int *radar_cnt) const{
	float gpsCost = gps_cnt*5;
	float camCost = camera_cnt*10;
	float lidCost = lidar_cnt*15;
	float radCost = radar_cnt*20;
	
	float finalCost = gpsCost + camCost + lidCost + radCost;
	return finalCost;
	
}

const int Sensor::getGps() const{
	return gps_cnt;
}

const int Sensor::getCamera() const{
	return camera_cnt;
}

const int Sensor::getLidar() const{
	return lidar_cnt;
}

const int Sensor::getRadar() const{
	return radar_cnt;
}

Sensor::operator==(const Sensor& agency){
	if(m_type == agency.m_type){
		return 0;
	}else{
		return 1;
	}
}

class Car {
	private:
		char m_make[MAX];
		char m_model[MAX];
		int m_year;
		Sensor m_sensor[SENSOR];
		float m_baseprice;
		float m_finalprice;
		bool m_available;
		char m_owner[MAX];
	
	public:
		Car();
		Car(char *make, char *model, char *owner, int *year, float *basePrice, float *finalPrice; bool *available);
		Car(const Car& cars);
		const char *getMake() const;
		const char *getModel() const;
		const char *getOwner() const;
		const int getYear() const;
		const float getBasePrice() const;
		const float getFinalPrice() const;
		const bool getAvailable() const;
		void setMake(const char *make);
		void setModel(const char *model);
		void setOwner(char *owner);
		void setYear(int *year);
		void setBasePrice(float *basePrice);
		void setFinalPrice(float *finalPrice);
		void setAvailable(bool available);
		float estimateCost(const int &days);
		void print() const;
		void updatePrice(float basePrice, Sensor sensor);
		const Car operator+(const Car &a, const Car &b)
		const Car operator+(const Car &lessee, const Car &owner) const;
		
};

Car::Car(){
	setMake(DFT_SENSOR);
	setModel(DFT_SENSOR);
	setOwner(DFT_SENSOR);
	setYear(YEAR);
	setBasePrice(ZERO);
	setFinalPrice(ZERO);
	setAvailable(AVAILABLE);
}

Car::Car(char *make, char *model, char *owner, int *year, float *basePrice, float *finalPrice; bool *available){
	setMake(make);
	setModel(model);
	setOwner(owner);
	m_year = year;
	m_baseprice = basePrice;
	m_finalprice = finalPrice;
	m_available = available;
}

Car::Car(const Car& cars){
	m_make = cars.m_make;
	m_model = cars.m_model;
	m_owner = cars.m_owner;
	m_year = cars.m_year;
	m_baseprice = cars.m_baseprice;
	m_finalprice = cars.m_finalprice;
	m_available = cars.m_available;
}

const char Car::getMake() const{
	return m_make;
}
const char Car::getModel() const{
	return m_model;
}
const char Car::getOwner() const{
	return m_owner;
}
const int Car::getYear() const{
	return m_year;
}
const float Car::getBasePrice() const{
	return m_baseprice;
}
const float Car::getFinalPrice() const{
	return m_finalprice;
}
const bool Car::getAvailable() const{
	return m_available;
}
void Car::setMake(const char *make){
	m_make = *make;
}
void Car::setModel(const char *model){
	m_model = *model;
}
void Car::setOwner(const char *owner){
	m_owner = *owner;
}
void Car::setYear(const int *year){
	m_year = *year;
}
void Car::setBasePrice(const float *baseprice){
	m_baseprice = *baseprice;
}
void Car::setFinalPrice(const float *finalprice){
	m_finalprice = *finalprice;
}
float Car::estimateCost(const int &days){
	float price;
	price = m_finalprice * days;
	return price;
}
void Car::print() const{

	//need to access sensor list, write it between {} and then call the finalprice method to calculate the final price plus the sensors FIX CODE
	//cout << m_make << " " << m_model << "      Base: " << m_baseprice << "   With " <<  << " " << m_baseprice << " " << m_finalprice << " Available: " << boolalpha << m_available << endl;
	cout << "Test";
}
const Car Car::operator+(const Car &a, const car &b){
	return Car(a.getSensors() + b.getSensors());
}
const Car Car::operator+(const Car &lessee, const Car &owner) const{
	return Car(lessee.getOwner() + owner.getOwner());
}


class Agency {
	private:
		char m_name[MAX];
		const int m_zipcode;
		Car m_inventory[CARS];
	public:
		Agency();
		Agency(char *name, int *zip);
		const char *getName();
		const int *getZip();
		void setName(const char *name);
		void setZip(const int *zip);
		const int & operator[](unsigned int index);
		void readAllData(const char *file);
		void printActiveSensors(class Agency *arr);//prints the total num of sensors of the agency by sensor type
		void printData(class Agency *arr);//print out name, zip, number of sensors by sensor type
		void printAllCars(class Agency *arr);//print out the car objects as well as their indexes
		void printAvailableCars(class Agency *arr);//print out only available cars sorted by index
};
Agency::Agency(){
	setName(DFT_SENSOR);
	setZip(CARS);
}
Agency::Agency(char *name, int *zip){
	m_name = name;
	m_zipcode = zip;
}
const char Agency::getName(){
	return m_name;	
}
const int Agency::getZip(){
	return m_zipcode;
}
void Agency::setName(const char *name){
	m_name = *name;
}
void Agency::setZip(const int *zip){
	m_zipcode = *zip;
}
const int & Car::operator[](unsigned int index){
	return m_inventory[index];
}
void Agency::readAllData(const char *file){
	
	int tempZip;	
	char tempAgency[MAX];
	int tempYear[CARS];
	char tempMake[MAX];
	char tempModel[MAX];
	float tempBasePrice;
	bool available;
	char lessee[MAX];
	
	ifstream inputStream(file);
	
	if(!inputStream.is_open()){
	
		cerr << "ERROR: COULD NOT OPEN FILE\n";	
		return;
	
	}
	
	for(int i = 0; i < 1; i++){
		char *pnt;
		int *pnt1;
		inputStream >> m_name >> tempAgency;
		pnt = tempAgency;
		pnt1 = m_zipcode;
		
		for(int i = 0; i < CARS;++i){
		
			*pnt1 = *pnt -48;
			pnt++;
			pnt1++;
			
		}
		
		Car *temp;
		Sensor *tempSensor;
		temp = m_inventory;
		tempSensor = m_inventory.m_sensor;
		
		for(int i = 0; i < CARS; ++i){
			char *a;
			int *b;
			inputStream >> tempYear >> tempMake >> tempModel >> tempBasePrice >> tempSensors >> lessee >> tempAvailable;
			temp->setYear(&tempYear);
			a = tempMake;
			temp->setMake(a);
			a = tempModel;
			temp->setModel(a);
			tempSensors = temp->setBasePrice(tempBasePrice);
			tempSensor->setGps(b);
			tempSensor->setCamera(b);
			tempSensor->setLidar(b);
			tempSensor->setRadar(b);
			temp->setOwner(a);
			temp->setAvailable(tempAvailable);
			++temp;
			++tempSensor;
			
		}
	}
	inputStream.close();
	
}
void Agency::printActiveSensors(class Agency *arr){
	
	Car *c = arr->m_inventory;
	Sensor *s = c->m_sensor;
	int temp;

	cout << "Active Sensors: {gps}: " << s->getGps() << " {camera}: " << s->getCamera() << " {lidar}: " << s->getLidar << " {radar}: " << s->getRadar;
}
	
void Agency::printData(class Agency *arr){
	
	Car *c = arr->m_inventory;
	Sensor *s = c->m_sensor;
	
	cout << m_name << " " << m_zipcode;
	s.printActiveSensors();
	
}
void Agency::printAllCars(class Agency *arr){
//needs work
	Car *c = arr->m_inventory;
	Sensor *s1 = c->m_sensor;
	for(int i = 0; i < 5; i++){
		cout << "[" << i << "]";
		c->print();
		s1->printActiveSensors();
		c->getAvailable();
		++c;
		++s1;
	}
}
void Agency::printAvailableCars(class Agency *arr){
//needs work

	Car *c = arr->m_inventory;
	Sensor *sens_pnt = c->m_sensor;
	cout << m_name << " " << m_zipcode;
	for(int i = 0; i < 5; i++){
		if(c->getAvailable() == true){
		cout << "[" << i << "]";
		sens_pnt->printActiveSensors;
		++c;
		++sens_pnt;
		}
	}

}

int main(){
	userMenuPrompt();
	return 0;
}

void userMenuPrompt(){
	class Agency arr[1];
	Agency *arr_pt = NULL; 
	arr_pt = arr;
	char userInput;
	
	do{
		cout << "Enter a Menu Option\n=====MENU=====\n1: Upload Car Agency Data\n2: View Car and Sensor Info\n3: Print available cars\n";
	cout << "4: Reserve a car \n 5: Exit\n"; 
	cin >> userInput;
		switch(userInput){
			case '1':
				//readIn
				readIn(arr_pt);
				break;
			case '2':
				//printAll
				printAll(arr_pt);
				break;
			case '3':
				//printFiltered
				printFiltered(arr_pt);
				break;
			case '4':
				//reserveOne
				reserveOne(arr_pt);
				break;
			case '5':
				break;
		}
		
	}while(userInput != '6');
	return;
}

void readIn(class Agency *arr){

	char inputFile[MAX];	
	cout << "Enter the Name of Your Input File (name.extension)\n";
	cin >> inputFile;
	
	readAllData(inputFile);
}

void printAll(class Agency *arr){
	//call printAllCars (PUT IN FORMAT OF OUTPUT 2 EXAMPLE!!!)
	
	printAllCars(arr);
}

void printFiltered(class Agency *arr){
	
	//call the printAvailable method
	printAvailableCars(arr);
}

void reserveOne(class Agency *arr){
	//prompt for user input for the car index.
	int userInput;
	cout << "Enter the car index for your reservation." << endl;
	cin >> userInput;
	Car *pnt;
	pnt = arr->m_inventory[userInput];
	if(pnt == 0){
		cout << "Error: Car not available. Please try again.\n";
		return;
	}
	pnt->setAvailable(false);
	arr -=userInput;
	arr::printAllCars(arr);
	cout << "Your rental car has been chosen.\n";
	
	
}
